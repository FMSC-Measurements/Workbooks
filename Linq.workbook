---
uti: com.xamarin.workbook
platforms:
- Console
---

# Using Linq

LINQ stands for Language INtegrated Query and is a tool that enables quering data in a manner that is comperable to SQL.

Linq can be used with any collection that implements the IEnumerable\<> interface such as Lists, Arrays, Dictionarys, as well, Linq can be used to query files and services such as a database or XML file.

## The Building Blocks

There are many features of C# that go in to making LINQ work. Most of these features were officialy added in C# 3.0, such as Lambdas, Extension Methods, and Expression Trees. But LINQ was added to .NET in version 3.5.

Although I could just show you how to use LINQ, understanding the components that make LINQ work is important to learning how to be a effective C# programmer.

On a side note I want to point out that although typicaly versions of C# the language allign with versions of the .NET framework. It is possible to use newer versions of C# with older versions of .NET. For example although LINQ wasn’t introduced until .NET version 3.5 and many of the language features needed for LINQ weren’t added until C# 3.0 it is possible to use LINQ in a project that uses .NET 2.0 by using a compiler that supports C# 3.0 i.e. VS 2008.

## Delegates

A Delegate is a type that defines the signature of a method and allows you to pass and store behavior in your code.

One example where you might want to use a delegate: Lets say you want to write a generic sort method. You don’t know anything about the type of data you will be sorting. If you are sorting objects, you don’t know how to compare two objects and put them in order. But as long as you can have someone tell you how to compare the type you are sorting you will be fine. Delegates allow you to have someone pass in a method to your sorting method that knows how to compare the types that they want sorted.

## Built in delegate types

Most of the time you wont need to declare your own delegate types. There are several delegate types built into .NET that should provide you with most of what you need. All of these delegate types live in the System namespace

#### Func

###### The Func delegate types are delegates that return a generic value and can have 0-16 parameters

### Action

The Action delegate types are methods that return void and can have 0-16 parameters

### Predicate

The Predicate delegate type returns bool and takes only one parameter

### Comparison

The Comparison delegate type represents a method that takes two parameters of the same type and returns a int

### EventHandler

The EventHandler delegate type represents a method that returns void and takes a object - sender and EventArgs as parameters

### Other delegate types

Another place where you can find many useful delegate types is in the System.ComponentModel namespace. These delegate types are primarly EventHandlers, such as, ListChangedEventHandler and PropertyChangedEventHandler.

## Lambdas

Lambdas are esentualy methods without a name and are primarly used along side delegate types. Because lambdas are methods without a name and can’t be called by name they need to be stored and called using a delegate type.

LINQ makes use of delegate types in most of its methods to allow you to provide the logic to allow the method to do its job. Although any method could be used, since the logic used in LINQ querys usualy only applys to that query lambdas are typicaly used.

Below are some examples of the syntax used for lambdas\
Note the \`=>\` opperator is known as the ‘goes to’

```csharp
//here is a lambda that takes no parameters. Note that the parentheses are required to show that we have no parameters
Action a = () => System.Console.WriteLine("Hello Action");
a();


Action<int> a1 = (int x) => System.Console.WriteLine($"Hello Action {x}");
a1(1);

//declaring the type of your parameters is optional in lambdas, because our delegate type requires that our lambda take in a parameter of 'int', the compiler can imply that our parameter type must be an int
a1 = (x) => System.Console.WriteLine($"Hello Action {x}");

// the parentheses around our parameter are optional if we only have one but can help with readability
a1 = x => System.Console.WriteLine($"Hello Action {x}");
a1(1);


Action<int, int> a2 = (x,y) => System.Console.WriteLine($"Hello Action {x} {y}");
a2(1, 2);
```

When using lambdas that return a value, the return keyword is optional when there is only one expression in the lambda.

```csharp
Func<int, int> f = (x) => { return x + 1;};
Console.WriteLine(f(1));
f = (x) => x + 1;
Console.WriteLine(f(2));
```

Another feature of lambdas is that they have access to variables in the scope where created. This is important to be aware of because when a lambda is created that references outside variables, those variables have to be held in memory as long as that lambda is alive, thus, creating the possibility of a memory leak. If you don’t reference outside variables you have nothing to worry about.

```csharp
int num = 1;
Action a = () => Console.WriteLine(num);// not passing in any variables to the lambda, just using variables in our scope
a();
num = 2;
a();
```

## Extension Methods

Extension methods are a type of static method and to a old C programmer they might feel comfortable. Its interesting how taking something that is riminicent of pre object orented programming and putting it in a object orented language can create one of the most powerful tools I’ve seen in a object orented language.

Lets jump right in with an example where we will create a regular static method and then change it to a extension method.

```csharp
//adds two numbers
public static int Add(int a, int b)
{
    return a + b; 
}

int num = Add(1, 3);//1 + 3 = 4
```

Now lets change Add to an extension method by adding this `this` keyword before the first variable

```csharp
//adds two numbers
public static int Add(this int a, int b)
{
    return a + b; 
}

int num = 1.Add(3);//1 + 3 = 4
```

Isn’t that cool. We were abile to effectively add a new method to a existing type without modifing the source code for that class. But the key word here is effectively. We aren’t actualy adding a method to the `int` class and extention methods do not follow the same rules as regular class methods.

1. extention methods can be called on null values, but as you can see in this example, that can also be useful.

```csharp
public static bool IsNull(this object obj) { return obj == null; }

object myObj = null;
bool isNull = myObj.IsNull();//returns true
```

1. extention methods can only access public members

```csharp
public class MyClass
{
    public int PublicField = 0;
    protected int ProtectedField = 0;
}

public static void ExMeth(this MyClass val)
{
    val.PublicField = 1;
    //val.ProtectedField = 1;//error, ProtectedField is inaccessable
}
```

1. extention methods can be added to interface types. No longer are interface types relegated to mear shells of code, they can actualy pull their own weight and do stuff.

```csharp
public static bool IsNullOrEmpty<T>(this IEnumerable<T> source)
{
    return source == null || System.Linq.Enumerable.Count(source) == 0;
}
```

## The IEnumerable<T> interface and Enumerable static class

The IEnumerable defines a simple interface that allows any class to expose its self as a readable collection of data. Any object that implements the IEnumerable interface can be used in a ForEach loop, making that interface a core part of the language.

In the Extension Method section I explane how extension methods allow interface types to have their own methods and show a example where I add a extension method to the IEnumerable interface.

The Enumerable static class is a class in the System.Linq namespace that contains many different extension methods that form the core of LINQ and allow you to create querys that work with any type that implements the IEnumerable interface.

[Enumerable Class Reference Doc ](https://msdn.microsoft.com/en-us/library/system.linq.enumerable\(v=vs.110\).aspx)

Side note about the IEnumerable interface: methods can use `yield return` to return a sequence of items as an IEnumerable collection. This can be use as a light weight alternative to methods that return a List or Array. More on this is covered in a seperate topic on yield return.

## Expression Trees

This section can be considered optional as it pertanes to special uses of LINQ that may not be used in day to day use.

Expression Trees are a type of tree based data structure that is used to allow a programmer to break apart a code expression at runtime.\
One way that expression trees are used is to take C# code at runtime and translate it into code that can be executed in a different language. This ability is used in LINQ to take the expression in the Where call of a LINQ query and translate it into a SQL WHERE clause that can be use in a generated SQL select statment.